<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistory">
    <accountData>
      <list>
        <AccountData>
          <accountId value="VXNlcjo0MjQzMDQ=" />
          <chats>
            <list>
              <chat>
                <internalId value="6e0cb005-6f77-4678-af53-b424c660c847" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
                <messages>
                  <list>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="le graphe stackedbarchart ne marche pas il ne s'affiche pas " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Il existe plusieurs raisons possibles pour lesquelles le graphique `stackedBarChart` ne s'affiche pas. Voici quelques pistes à vérifier :&#10;&#10;1. **Vérifiez que vous avez correctement importé la bibliothèque D3.js**. D3.js est une bibliothèque JavaScript requise pour créer des visualisations de données. Assurez-vous que le fichier D3.js est correctement lié dans votre code HTML.&#10;&#10;2. **Vérifiez que vous avez correctement lié le fichier JavaScript contenant le code pour le graphique**. Assurez-vous que le fichier JavaScript contenant le code pour créer le graphique `stackedBarChart` est correctement lié dans votre code HTML.&#10;&#10;3. **Vérifiez que vous avez un élément HTML avec un identifiant approprié pour accueillir le graphique**. Dans votre code HTML, vous devez avoir un élément `div` ou un autre élément avec un identifiant unique auquel vous faites référence dans votre code JavaScript pour créer le graphique.&#10;&#10;4. **Vérifiez que les données sont correctement formatées**. Le graphique `stackedBarChart` attend des données dans un format spécifique. Assurez-vous que vos données sont correctement structurées et formatées pour être utilisées avec ce type de graphique.&#10;&#10;5. **Vérifiez qu'il n'y a pas d'erreurs dans la console du navigateur**. Ouvrez les outils de développement de votre navigateur (généralement avec F12 ou Ctrl+Shift+I) et vérifiez s'il n'y a pas d'erreurs JavaScript signalées dans la console. Ces erreurs peuvent vous aider à identifier le problème.&#10;&#10;6. **Vérifiez la documentation de D3.js pour le graphique `stackedBarChart`**. Assurez-vous que vous suivez correctement les instructions et les exemples de la documentation pour créer ce type de graphique.&#10;&#10;Si vous pouvez fournir plus de détails sur votre code et votre configuration, je pourrai vous aider de manière plus spécifique à résoudre ce problème." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="public void populateStackedBarChart(Connection connection, Date dateDebut, Date dateFin,&#10;                                        StackedBarChart&amp;lt;String, Number&amp;gt; stackedBarChart, boolean isForMonth, boolean isDelivered) {&#10;        Admin admin = new Admin();&#10;        int[] commandes;&#10;&#10;        // Si le graphique est pour le mois, utilisez les dates de début et de fin du mois actuel&#10;        if (isForMonth) {&#10;            Calendar cal = Calendar.getInstance();&#10;            cal.setTime(dateDebut);&#10;            cal.set(Calendar.DAY_OF_MONTH, 1); // Premier jour du mois&#10;            Date debutMois = cal.getTime();&#10;            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH)); // Dernier jour du mois&#10;            Date finMois = cal.getTime();&#10;&#10;            // Calculer les commandes livrées et annulées pour le mois actuel&#10;            commandes = admin.calculerCommandesLivreesEtAnnulees(connection, debutMois, finMois);&#10;        } else {&#10;            // Si le graphique est pour la semaine, utilisez les dates de début et de fin de la semaine actuelle&#10;            Calendar cal = Calendar.getInstance();&#10;            cal.setTime(dateDebut);&#10;            cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek()); // Premier jour de la semaine&#10;            Date debutSemaine = cal.getTime();&#10;            cal.add(Calendar.DATE, 6); // Dernier jour de la semaine&#10;            Date finSemaine = cal.getTime();&#10;&#10;            // Calculer les commandes livrées et annulées pour la semaine actuelle&#10;            commandes = admin.calculerCommandesLivreesEtAnnulees(connection, debutSemaine, finSemaine);&#10;        }&#10;&#10;        // Si isDelivered est vrai, utilisez commandes[0] pour les commandes livrées, sinon utilisez commandes[1] pour les commandes annulées&#10;        int commandesLivre = isDelivered ? commandes[0] : commandes[1];&#10;        int commandesNonLivre = isDelivered ? commandes[1] : commandes[0];&#10;&#10;        // Effacer les données précédentes du graphique&#10;        stackedBarChart.getData().clear();&#10;&#10;        // Créer les séries pour les commandes livrées et non livrées&#10;        XYChart.Series&amp;lt;String, Number&amp;gt; seriesLivrees = new XYChart.Series&amp;lt;&amp;gt;();&#10;        seriesLivrees.setName(&amp;quot;Commandes Livrées&amp;quot;);&#10;        seriesLivrees.getData().add(new XYChart.Data&amp;lt;&amp;gt;(&amp;quot;&amp;quot;, commandesLivre));&#10;&#10;        XYChart.Series&amp;lt;String, Number&amp;gt; seriesAnnulees = new XYChart.Series&amp;lt;&amp;gt;();&#10;        seriesAnnulees.setName(&amp;quot;Commandes Annulées&amp;quot;);&#10;        seriesAnnulees.getData().add(new XYChart.Data&amp;lt;&amp;gt;(&amp;quot;&amp;quot;, commandesNonLivre));&#10;&#10;        // Ajouter les séries au graphique empilé&#10;        stackedBarChart.getData().addAll(seriesLivrees, seriesAnnulees);&#10;&#10;        // Ajouter une classe CSS personnalisée pour positionner la légende&#10;        stackedBarChart.getStyleClass().add(&amp;quot;legend-position&amp;quot;);&#10;&#10;        // Définir le titre du graphique&#10;        stackedBarChart.setTitle(&amp;quot;Statistiques de commandes&amp;quot;);&#10;    }&#10;ce code la s occupe du graphe mais il n affiche pas ce que je veux " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="D'après le code fourni, il semble que vous utilisiez la bibliothèque JavaFX pour créer un graphique à barres empilées (`StackedBarChart`). Cependant, il y a quelques points à vérifier pour vous assurer que le graphique affiche les données correctement :&#10;&#10;1. **Vérifiez que les données sont correctement calculées** : Assurez-vous que la méthode `admin.calculerCommandesLivreesEtAnnulees(connection, debutMois, finMois)` (ou `admin.calculerCommandesLivreesEtAnnulees(connection, debutSemaine, finSemaine)`) retourne les bonnes valeurs pour les commandes livrées et annulées.&#10;&#10;2. **Vérifiez que le graphique est correctement initialisé et affiché dans l'interface utilisateur** : Le code fourni ne montre que la méthode `populateStackedBarChart`, mais il est important de s'assurer que le graphique `stackedBarChart` est correctement créé, ajouté à la scène JavaFX et affiché dans l'interface utilisateur.&#10;&#10;3. **Vérifiez le format des données du graphique** : Le graphique `StackedBarChart` attend des données dans un format spécifique. Dans votre code, vous ajoutez une seule valeur pour chaque série (`seriesLivrees` et `seriesAnnulees`). Cela peut fonctionner si vous voulez afficher un seul groupe de barres empilées, mais si vous voulez afficher plusieurs groupes (par exemple, un groupe pour chaque jour du mois), vous devrez ajouter plusieurs points de données à chaque série.&#10;&#10;4. **Vérifiez les paramètres du graphique** : Vous pouvez ajuster les paramètres du graphique, comme les étiquettes des axes, les couleurs, etc., pour une meilleure lisibilité des données.&#10;&#10;5. **Vérifiez la documentation de JavaFX** : Si vous rencontrez encore des problèmes, consultez la documentation officielle de JavaFX pour les graphiques à barres empilées (`StackedBarChart`) afin de vous assurer que vous suivez correctement les instructions pour créer et afficher ce type de graphique.&#10;&#10;Sans plus de contexte sur votre code et votre interface utilisateur, il est difficile de donner une solution plus précise. Cependant, en vérifiant ces points, vous devriez être en mesure d'identifier et de résoudre le problème." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="package com.example;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.SQLException;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class Admin extends Utilisateur {&#10;&#10;&#10;   public Boolean creerCompte(String nom, String prenom, String email, String motDePasse, String role) {&#10;      try (Connection connection = DatabaseConnection.getConnection()) {&#10;         String sql = &amp;quot;INSERT INTO Utilisateur (nom, prenom, email, motDePasse, etat, role) VALUES (?, ?, ?, ?, ?, ?)&amp;quot;;&#10;         PreparedStatement statement = connection.prepareStatement(sql);&#10;         statement.setString(1, nom);&#10;         statement.setString(2, prenom);&#10;         statement.setString(3, email);&#10;         statement.setString(4, motDePasse);&#10;         statement.setString(5, &amp;quot;actif&amp;quot;); // Affecter l'état &amp;quot;actif&amp;quot;&#10;         statement.setString(6, role); // Utiliser le rôle fourni&#10;&#10;         int rowsInserted = statement.executeUpdate();&#10;         return rowsInserted &amp;gt; 0; // Si au moins une ligne a été insérée, retourne vrai, sinon retourne faux&#10;      } catch (SQLException e) {&#10;         System.out.println(&amp;quot;Erreur lors de la connexion à la base de données : &amp;quot; + e.getMessage());&#10;         return false; // Retourne faux en cas d'erreur&#10;      }&#10;   }&#10;&#10;   public Boolean supprimerCompte(int idCpt) {&#10;      try (Connection connection = DatabaseConnection.getConnection()) {&#10;         String query = &amp;quot;DELETE FROM utilisateur WHERE idCpt = ?&amp;quot;;&#10;         try (PreparedStatement statement = connection.prepareStatement(query)) {&#10;            statement.setInt(1, idCpt);&#10;            statement.executeUpdate();&#10;            return true;&#10;         }&#10;      } catch (SQLException e) {&#10;         e.printStackTrace();&#10;         return false;&#10;      }&#10;   }&#10;&#10;   public Map&amp;lt;String, Integer&amp;gt; calculerPlatsLesPlusVendus(Connection connection, Date dateDebut, Date dateFin) {&#10;      Map&amp;lt;String, Integer&amp;gt; platsVendus = new HashMap&amp;lt;&amp;gt;();&#10;      String query = &amp;quot;SELECT plat.nom, COUNT(*) AS qte_vendue &amp;quot; +&#10;              &amp;quot;FROM plat &amp;quot; +&#10;              &amp;quot;INNER JOIN panier_plat ON plat.idPlat = panier_plat.idPlat &amp;quot; +&#10;              &amp;quot;INNER JOIN panier ON panier_plat.idPanier = panier.idPanier &amp;quot; +&#10;              &amp;quot;INNER JOIN commande ON panier.idPanier = commande.idPanier &amp;quot; +&#10;              &amp;quot;WHERE commande.Creadate BETWEEN ? AND ? &amp;quot; +&#10;              &amp;quot;GROUP BY plat.nom &amp;quot; +&#10;              &amp;quot;ORDER BY qte_vendue DESC &amp;quot; +&#10;              &amp;quot;LIMIT 5&amp;quot;;&#10;&#10;      try (PreparedStatement statement = connection.prepareStatement(query)) {&#10;         statement.setDate(1, new java.sql.Date(dateDebut.getTime()));&#10;         statement.setDate(2, new java.sql.Date(dateFin.getTime()));&#10;         ResultSet resultSet = statement.executeQuery();&#10;         while (resultSet.next()) {&#10;            String plat = resultSet.getString(&amp;quot;nom&amp;quot;);&#10;            int qteVendue = resultSet.getInt(&amp;quot;qte_vendue&amp;quot;);&#10;            platsVendus.put(plat, qteVendue);&#10;         }&#10;      } catch (SQLException e) {&#10;         e.printStackTrace();&#10;      }&#10;&#10;      return platsVendus;&#10;   }&#10;&#10;&#10;&#10;&#10;   public int[] calculerCommandesLivreesEtAnnulees(Connection connection, Date dateDebut, Date dateFin) {&#10;      int[] commandes = new int[2]; // Index 0 pour les commandes livrées, index 1 pour les commandes annulées&#10;      String queryLivrees = &amp;quot;SELECT COUNT(*) AS livrees &amp;quot; +&#10;              &amp;quot;FROM commande c &amp;quot; +&#10;              &amp;quot;INNER JOIN livraison l ON c.idCommande = l.idCommande &amp;quot; +&#10;              &amp;quot;WHERE c.Creadate BETWEEN ? AND ? &amp;quot; +&#10;              &amp;quot;AND l.status = 1&amp;quot;;&#10;&#10;      String queryAnnulees = &amp;quot;SELECT COUNT(*) AS annulees &amp;quot; +&#10;              &amp;quot;FROM commande c &amp;quot; +&#10;              &amp;quot;INNER JOIN livraison l ON c.idCommande = l.idCommande &amp;quot; +&#10;              &amp;quot;WHERE c.Creadate BETWEEN ? AND ? &amp;quot; +&#10;              &amp;quot;AND l.status = -1&amp;quot;;&#10;&#10;      try (PreparedStatement statementLivrees = connection.prepareStatement(queryLivrees);&#10;           PreparedStatement statementAnnulees = connection.prepareStatement(queryAnnulees)) {&#10;         statementLivrees.setDate(1, new java.sql.Date(dateDebut.getTime()));&#10;         statementLivrees.setDate(2, new java.sql.Date(dateFin.getTime()));&#10;         statementAnnulees.setDate(1, new java.sql.Date(dateDebut.getTime()));&#10;         statementAnnulees.setDate(2, new java.sql.Date(dateFin.getTime()));&#10;&#10;         ResultSet resultSetLivrees = statementLivrees.executeQuery();&#10;         if (resultSetLivrees.next()) {&#10;            commandes[0] = resultSetLivrees.getInt(&amp;quot;livrees&amp;quot;);&#10;         }&#10;&#10;         ResultSet resultSetAnnulees = statementAnnulees.executeQuery();&#10;         if (resultSetAnnulees.next()) {&#10;            commandes[1] = resultSetAnnulees.getInt(&amp;quot;annulees&amp;quot;);&#10;         }&#10;      } catch (SQLException e) {&#10;         e.printStackTrace();&#10;      }&#10;&#10;      return commandes;&#10;   }&#10;&#10;&#10;&#10;&#10;}" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="D'après le code fourni, la classe `Admin` contient plusieurs méthodes liées à la gestion des comptes utilisateurs, des commandes et des plats vendus dans une application de restauration.&#10;&#10;Voici un résumé des méthodes présentes dans cette classe :&#10;&#10;1. `creerCompte(String nom, String prenom, String email, String motDePasse, String role)` : Cette méthode permet de créer un nouveau compte utilisateur dans la base de données en insérant les informations fournies (nom, prénom, email, mot de passe et rôle) dans la table `Utilisateur`. Elle retourne `true` si l'insertion a réussi, `false` sinon.&#10;&#10;2. `supprimerCompte(int idCpt)` : Cette méthode supprime un compte utilisateur de la base de données en fonction de l'identifiant `idCpt` fourni. Elle retourne `true` si la suppression a réussi, `false` sinon.&#10;&#10;3. `calculerPlatsLesPlusVendus(Connection connection, Date dateDebut, Date dateFin)` : Cette méthode calcule les 5 plats les plus vendus dans la période spécifiée par `dateDebut` et `dateFin`. Elle retourne un `Map` contenant le nom du plat comme clé et la quantité vendue comme valeur.&#10;&#10;4. `calculerCommandesLivreesEtAnnulees(Connection connection, Date dateDebut, Date dateFin)` : Cette méthode calcule le nombre de commandes livrées et annulées dans la période spécifiée par `dateDebut` et `dateFin`. Elle retourne un tableau d'entiers où le premier élément représente le nombre de commandes livrées et le deuxième élément représente le nombre de commandes annulées.&#10;&#10;Ces méthodes utilisent des requêtes SQL pour interagir avec une base de données et effectuer les opérations nécessaires. Elles font appel à la classe `DatabaseConnection` pour établir une connexion à la base de données.&#10;&#10;Notez que cette classe étend la classe `Utilisateur`, ce qui suggère qu'elle hérite probablement des fonctionnalités de base liées à la gestion des utilisateurs." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="je veux pas que tu m explique les codes , mais trouve la solution du probleme pourquoi sa ne marche pas " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="D'après les informations fournies, il semble que vous rencontriez un problème avec l'affichage du graphique à barres empilées (`StackedBarChart`) dans votre application JavaFX. Malheureusement, sans plus de détails sur le contexte, l'environnement d'exécution et le code complet de votre application, il est difficile de déterminer avec précision la cause du problème.&#10;&#10;Cependant, voici quelques pistes à explorer pour résoudre ce problème :&#10;&#10;1. **Vérifiez que le graphique est correctement initialisé et ajouté à la scène JavaFX** : Assurez-vous que vous avez créé une instance du graphique `StackedBarChart` et que vous l'avez ajoutée à un conteneur approprié (comme un `StackPane` ou un `BorderPane`) dans votre scène JavaFX.&#10;&#10;2. **Vérifiez que les données sont correctement calculées et formatées** : Assurez-vous que les méthodes `calculerCommandesLivreesEtAnnulees` et `populateStackedBarChart` retournent et traitent correctement les données attendues par le graphique.&#10;&#10;3. **Vérifiez que le graphique est correctement mis à jour** : Assurez-vous que vous appelez la méthode `populateStackedBarChart` au bon moment (par exemple, lors de l'initialisation de l'interface utilisateur ou lorsque les données changent) pour mettre à jour les données du graphique.&#10;&#10;4. **Vérifiez les dépendances et les bibliothèques** : Assurez-vous que vous avez correctement importé et configuré les bibliothèques JavaFX nécessaires pour créer et afficher des graphiques.&#10;&#10;5. **Vérifiez les logs et la console pour les erreurs** : Examinez attentivement les logs et la console de votre environnement de développement pour détecter d'éventuelles erreurs ou exceptions qui pourraient expliquer le problème.&#10;&#10;6. **Essayez avec un exemple simple** : Si possible, essayez de créer un petit exemple minimal qui reproduit le problème avec le graphique `StackedBarChart`. Cela peut vous aider à isoler le problème et à identifier la cause racine.&#10;&#10;Si malgré ces vérifications, vous n'arrivez toujours pas à résoudre le problème, n'hésitez pas à fournir plus de détails sur votre code, votre configuration et les erreurs rencontrées. Cela me permettra de vous aider de manière plus efficace." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="public void populateStackedBarChart(Connection connection, Date dateDebut, Date dateFin,&#10;                                        StackedBarChart&amp;lt;String, Number&amp;gt; stackedBarChart, boolean isForMonth, boolean isDelivered) {&#10;        Admin admin = new Admin();&#10;        int[] commandes;&#10;&#10;        // Si le graphique est pour le mois, utilisez les dates de début et de fin du mois actuel&#10;        if (isForMonth) {&#10;            Calendar cal = Calendar.getInstance();&#10;            cal.setTime(dateDebut);&#10;            cal.set(Calendar.DAY_OF_MONTH, 1); // Premier jour du mois&#10;            Date debutMois = cal.getTime();&#10;            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH)); // Dernier jour du mois&#10;            Date finMois = cal.getTime();&#10;&#10;            // Calculer les commandes livrées et annulées pour le mois actuel&#10;            commandes = admin.calculerCommandesLivreesEtAnnulees(connection, debutMois, finMois);&#10;        } else {&#10;            // Si le graphique est pour la semaine, utilisez les dates de début et de fin de la semaine actuelle&#10;            Calendar cal = Calendar.getInstance();&#10;            cal.setTime(dateDebut);&#10;            cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek()); // Premier jour de la semaine&#10;            Date debutSemaine = cal.getTime();&#10;            cal.add(Calendar.DATE, 6); // Dernier jour de la semaine&#10;            Date finSemaine = cal.getTime();&#10;&#10;            // Calculer les commandes livrées et annulées pour la semaine actuelle&#10;            commandes = admin.calculerCommandesLivreesEtAnnulees(connection, debutSemaine, finSemaine);&#10;        }&#10;&#10;        // Si isDelivered est vrai, utilisez commandes[0] pour les commandes livrées, sinon utilisez commandes[1] pour les commandes annulées&#10;        int commandesLivre = isDelivered ? commandes[0] : commandes[1];&#10;        int commandesNonLivre = isDelivered ? commandes[1] : commandes[0];&#10;&#10;        // Effacer les données précédentes du graphique&#10;        stackedBarChart.getData().clear();&#10;&#10;        // Créer les séries pour les commandes livrées et non livrées&#10;        XYChart.Series&amp;lt;String, Number&amp;gt; seriesLivrees = new XYChart.Series&amp;lt;&amp;gt;();&#10;        seriesLivrees.setName(&amp;quot;Commandes Livrées&amp;quot;);&#10;        seriesLivrees.getData().add(new XYChart.Data&amp;lt;&amp;gt;(&amp;quot;&amp;quot;, commandesLivre));&#10;&#10;        XYChart.Series&amp;lt;String, Number&amp;gt; seriesAnnulees = new XYChart.Series&amp;lt;&amp;gt;();&#10;        seriesAnnulees.setName(&amp;quot;Commandes Annulées&amp;quot;);&#10;        seriesAnnulees.getData().add(new XYChart.Data&amp;lt;&amp;gt;(&amp;quot;&amp;quot;, commandesNonLivre));&#10;&#10;        // Ajouter les séries au graphique empilé&#10;        stackedBarChart.getData().addAll(seriesLivrees, seriesAnnulees);&#10;&#10;        // Ajouter une classe CSS personnalisée pour positionner la légende&#10;        stackedBarChart.getStyleClass().add(&amp;quot;legend-position&amp;quot;);&#10;&#10;        // Définir le titre du graphique&#10;        stackedBarChart.setTitle(&amp;quot;Statistiques de commandes&amp;quot;);&#10;    }&#10;&#10;public int[] calculerCommandesLivreesEtAnnulees(Connection connection, Date dateDebut, Date dateFin) {&#10;      int[] commandes = new int[2]; // Index 0 pour les commandes livrées, index 1 pour les commandes annulées&#10;      String queryLivrees = &amp;quot;SELECT COUNT(*) AS livrees &amp;quot; +&#10;              &amp;quot;FROM commande c &amp;quot; +&#10;              &amp;quot;INNER JOIN livraison l ON c.idCommande = l.idCommande &amp;quot; +&#10;              &amp;quot;WHERE c.Creadate BETWEEN ? AND ? &amp;quot; +&#10;              &amp;quot;AND l.status = 1&amp;quot;;&#10;&#10;      String queryAnnulees = &amp;quot;SELECT COUNT(*) AS annulees &amp;quot; +&#10;              &amp;quot;FROM commande c &amp;quot; +&#10;              &amp;quot;INNER JOIN livraison l ON c.idCommande = l.idCommande &amp;quot; +&#10;              &amp;quot;WHERE c.Creadate BETWEEN ? AND ? &amp;quot; +&#10;              &amp;quot;AND l.status = -1&amp;quot;;&#10;&#10;      try (PreparedStatement statementLivrees = connection.prepareStatement(queryLivrees);&#10;           PreparedStatement statementAnnulees = connection.prepareStatement(queryAnnulees)) {&#10;         statementLivrees.setDate(1, new java.sql.Date(dateDebut.getTime()));&#10;         statementLivrees.setDate(2, new java.sql.Date(dateFin.getTime()));&#10;         statementAnnulees.setDate(1, new java.sql.Date(dateDebut.getTime()));&#10;         statementAnnulees.setDate(2, new java.sql.Date(dateFin.getTime()));&#10;&#10;         ResultSet resultSetLivrees = statementLivrees.executeQuery();&#10;         if (resultSetLivrees.next()) {&#10;            commandes[0] = resultSetLivrees.getInt(&amp;quot;livrees&amp;quot;);&#10;         }&#10;&#10;         ResultSet resultSetAnnulees = statementAnnulees.executeQuery();&#10;         if (resultSetAnnulees.next()) {&#10;            commandes[1] = resultSetAnnulees.getInt(&amp;quot;annulees&amp;quot;);&#10;         }&#10;      } catch (SQLException e) {&#10;         e.printStackTrace();&#10;      }&#10;&#10;      return commandes;&#10;   }&#10;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&#10;&#10;&amp;lt;?import com.jfoenix.controls.JFXButton?&amp;gt;&#10;&amp;lt;?import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon?&amp;gt;&#10;&amp;lt;?import javafx.geometry.Insets?&amp;gt;&#10;&amp;lt;?import javafx.scene.Cursor?&amp;gt;&#10;&amp;lt;?import javafx.scene.chart.BarChart?&amp;gt;&#10;&amp;lt;?import javafx.scene.chart.CategoryAxis?&amp;gt;&#10;&amp;lt;?import javafx.scene.chart.NumberAxis?&amp;gt;&#10;&amp;lt;?import javafx.scene.chart.StackedBarChart?&amp;gt;&#10;&amp;lt;?import javafx.scene.control.Button?&amp;gt;&#10;&amp;lt;?import javafx.scene.control.Label?&amp;gt;&#10;&amp;lt;?import javafx.scene.image.Image?&amp;gt;&#10;&amp;lt;?import javafx.scene.image.ImageView?&amp;gt;&#10;&amp;lt;?import javafx.scene.layout.AnchorPane?&amp;gt;&#10;&amp;lt;?import javafx.scene.layout.HBox?&amp;gt;&#10;&amp;lt;?import javafx.scene.layout.Pane?&amp;gt;&#10;&amp;lt;?import javafx.scene.layout.VBox?&amp;gt;&#10;&amp;lt;?import javafx.scene.text.Font?&amp;gt;&#10;&#10;&amp;lt;AnchorPane prefHeight=&amp;quot;700.0&amp;quot; prefWidth=&amp;quot;1000.0&amp;quot; style=&amp;quot;-fx-background-color: White;&amp;quot; xmlns=&amp;quot;http://javafx.com/javafx/21&amp;quot; xmlns:fx=&amp;quot;http://javafx.com/fxml/1&amp;quot; fx:controller=&amp;quot;com.example.AdminDashboardController&amp;quot;&amp;gt;&#10;   &amp;lt;children&amp;gt;&#10;      &amp;lt;AnchorPane layoutX=&amp;quot;44.0&amp;quot; prefHeight=&amp;quot;722.0&amp;quot; prefWidth=&amp;quot;942.0&amp;quot; AnchorPane.bottomAnchor=&amp;quot;0.0&amp;quot; AnchorPane.rightAnchor=&amp;quot;0.0&amp;quot;&amp;gt;&#10;         &amp;lt;children&amp;gt;&#10;            &amp;lt;Pane layoutX=&amp;quot;-0.8&amp;quot; layoutY=&amp;quot;-0.8&amp;quot; prefHeight=&amp;quot;723.0&amp;quot; prefWidth=&amp;quot;943.0&amp;quot; style=&amp;quot;-fx-background-color: #edf2f4;&amp;quot; AnchorPane.bottomAnchor=&amp;quot;0.0&amp;quot; AnchorPane.leftAnchor=&amp;quot;-1.0&amp;quot; AnchorPane.rightAnchor=&amp;quot;0.0&amp;quot; AnchorPane.topAnchor=&amp;quot;-1.0&amp;quot;&amp;gt;&#10;               &amp;lt;children&amp;gt;&#10;                  &amp;lt;HBox alignment=&amp;quot;CENTER&amp;quot; layoutY=&amp;quot;24.0&amp;quot; prefHeight=&amp;quot;58.0&amp;quot; prefWidth=&amp;quot;944.0&amp;quot; spacing=&amp;quot;650.0&amp;quot;&amp;gt;&#10;                     &amp;lt;children&amp;gt;&#10;                        &amp;lt;Label text=&amp;quot;Tableau de bord&amp;quot;&amp;gt;&#10;                           &amp;lt;font&amp;gt;&#10;                              &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;24.0&amp;quot; /&amp;gt;&#10;                           &amp;lt;/font&amp;gt;&#10;                        &amp;lt;/Label&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon glyphName=&amp;quot;BELL&amp;quot; size=&amp;quot;2em&amp;quot; /&amp;gt;&#10;                     &amp;lt;/children&amp;gt;&#10;                  &amp;lt;/HBox&amp;gt;&#10;                  &amp;lt;BarChart fx:id=&amp;quot;platChart&amp;quot; layoutY=&amp;quot;179.0&amp;quot; prefHeight=&amp;quot;284.0&amp;quot; prefWidth=&amp;quot;300.0&amp;quot;&amp;gt;&#10;                      &amp;lt;xAxis&amp;gt;&#10;                          &amp;lt;CategoryAxis side=&amp;quot;BOTTOM&amp;quot; tickLabelRotation=&amp;quot;90&amp;quot; /&amp;gt;&#10;                      &amp;lt;/xAxis&amp;gt;&#10;                      &amp;lt;yAxis&amp;gt;&#10;                          &amp;lt;NumberAxis label=&amp;quot;Revenus&amp;quot; side=&amp;quot;LEFT&amp;quot; /&amp;gt;&#10;                      &amp;lt;/yAxis&amp;gt;&#10;                      &amp;lt;!-- Ajustements pour la hauteur des colonnes --&amp;gt;&#10;                      &amp;lt;barGap&amp;gt;1&amp;lt;/barGap&amp;gt; &amp;lt;!-- Espace entre les colonnes --&amp;gt;&#10;                      &amp;lt;categoryGap&amp;gt;1&amp;lt;/categoryGap&amp;gt; &amp;lt;!-- Espace entre les catégories (étiquettes sur l'axe des abscisses) --&amp;gt;&#10;                  &amp;lt;/BarChart&amp;gt;&#10;&#10;                  &amp;lt;StackedBarChart fx:id=&amp;quot;stackedBarChart&amp;quot; layoutX=&amp;quot;318.0&amp;quot; layoutY=&amp;quot;179.0&amp;quot; prefHeight=&amp;quot;284.0&amp;quot; prefWidth=&amp;quot;300.0&amp;quot;&amp;gt;&#10;                      &amp;lt;xAxis&amp;gt;&#10;                          &amp;lt;CategoryAxis side=&amp;quot;BOTTOM&amp;quot; /&amp;gt;&#10;                      &amp;lt;/xAxis&amp;gt;&#10;                      &amp;lt;yAxis&amp;gt;&#10;                          &amp;lt;NumberAxis side=&amp;quot;LEFT&amp;quot; /&amp;gt;&#10;                      &amp;lt;/yAxis&amp;gt;&#10;                  &amp;lt;/StackedBarChart&amp;gt;&#10;&#10;                  &amp;lt;Pane layoutX=&amp;quot;640.0&amp;quot; layoutY=&amp;quot;108.0&amp;quot; prefHeight=&amp;quot;491.0&amp;quot; prefWidth=&amp;quot;265.0&amp;quot; style=&amp;quot;-fx-background-color: white; -fx-background-radius: 20;&amp;quot;&amp;gt;&#10;                     &amp;lt;children&amp;gt;&#10;                        &amp;lt;Button layoutX=&amp;quot;45.0&amp;quot; layoutY=&amp;quot;428.0&amp;quot; mnemonicParsing=&amp;quot;false&amp;quot; prefHeight=&amp;quot;43.0&amp;quot; prefWidth=&amp;quot;187.0&amp;quot; style=&amp;quot;-fx-background-color: #780000;&amp;quot; text=&amp;quot;Voir mon menu&amp;quot; textFill=&amp;quot;WHITE&amp;quot;&amp;gt;&#10;                           &amp;lt;font&amp;gt;&#10;                              &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;14.0&amp;quot; /&amp;gt;&#10;                           &amp;lt;/font&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/Button&amp;gt;&#10;                     &amp;lt;/children&amp;gt;&#10;                  &amp;lt;/Pane&amp;gt;&#10;                  &amp;lt;Button layoutX=&amp;quot;62.0&amp;quot; layoutY=&amp;quot;98.0&amp;quot; mnemonicParsing=&amp;quot;false&amp;quot; onAction=&amp;quot;#forMonth&amp;quot; prefHeight=&amp;quot;25.0&amp;quot; prefWidth=&amp;quot;111.0&amp;quot; style=&amp;quot;-fx-background-color: #003049;&amp;quot; text=&amp;quot;Ce mois&amp;quot; textFill=&amp;quot;WHITE&amp;quot; /&amp;gt;&#10;                  &amp;lt;Button layoutX=&amp;quot;181.0&amp;quot; layoutY=&amp;quot;98.0&amp;quot; mnemonicParsing=&amp;quot;false&amp;quot; onAction=&amp;quot;#forWeek&amp;quot; prefHeight=&amp;quot;25.0&amp;quot; prefWidth=&amp;quot;111.0&amp;quot; style=&amp;quot;-fx-background-color: #ffffff; -fx-border-color: #003049; -fx-border-width: 0.5; -fx-border-radius: 5;&amp;quot; text=&amp;quot;Cette semaine&amp;quot; textFill=&amp;quot;#003049&amp;quot; /&amp;gt;&#10;               &amp;lt;/children&amp;gt;&#10;            &amp;lt;/Pane&amp;gt;&#10;         &amp;lt;/children&amp;gt;&#10;      &amp;lt;/AnchorPane&amp;gt;&#10;      &amp;lt;AnchorPane fx:id=&amp;quot;menuitems&amp;quot; layoutX=&amp;quot;55.2&amp;quot; layoutY=&amp;quot;1.0&amp;quot; prefHeight=&amp;quot;715.0&amp;quot; prefWidth=&amp;quot;137.0&amp;quot; style=&amp;quot;-fx-background-color: White;&amp;quot; visible=&amp;quot;false&amp;quot; AnchorPane.bottomAnchor=&amp;quot;3.0&amp;quot; AnchorPane.leftAnchor=&amp;quot;55.0&amp;quot;&amp;gt;&#10;         &amp;lt;children&amp;gt;&#10;            &amp;lt;VBox prefHeight=&amp;quot;700.0&amp;quot; prefWidth=&amp;quot;210.0&amp;quot; spacing=&amp;quot;5.0&amp;quot; AnchorPane.bottomAnchor=&amp;quot;0.0&amp;quot; AnchorPane.leftAnchor=&amp;quot;0.0&amp;quot; AnchorPane.rightAnchor=&amp;quot;0.0&amp;quot; AnchorPane.topAnchor=&amp;quot;1.0&amp;quot;&amp;gt;&#10;               &amp;lt;children&amp;gt;&#10;                  &amp;lt;Label prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; text=&amp;quot;AMIYR&amp;quot;&amp;gt;&#10;                     &amp;lt;font&amp;gt;&#10;                        &amp;lt;Font name=&amp;quot;Rum Raisin&amp;quot; size=&amp;quot;24.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/font&amp;gt;&#10;                     &amp;lt;padding&amp;gt;&#10;                        &amp;lt;Insets left=&amp;quot;10.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/padding&amp;gt;&#10;                     &amp;lt;VBox.margin&amp;gt;&#10;                        &amp;lt;Insets bottom=&amp;quot;20.0&amp;quot; top=&amp;quot;15.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/VBox.margin&amp;gt;&#10;                  &amp;lt;/Label&amp;gt;&#10;                  &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; layoutX=&amp;quot;10.0&amp;quot; layoutY=&amp;quot;10.0&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Accueil&amp;quot;&amp;gt;&#10;                     &amp;lt;font&amp;gt;&#10;                        &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/font&amp;gt;&#10;                     &amp;lt;cursor&amp;gt;&#10;                        &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                     &amp;lt;/cursor&amp;gt;&#10;                  &amp;lt;/JFXButton&amp;gt;&#10;                  &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; layoutX=&amp;quot;10.0&amp;quot; layoutY=&amp;quot;58.0&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Plats&amp;quot; textFill=&amp;quot;#919191&amp;quot;&amp;gt;&#10;                     &amp;lt;font&amp;gt;&#10;                        &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/font&amp;gt;&#10;                     &amp;lt;cursor&amp;gt;&#10;                        &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                     &amp;lt;/cursor&amp;gt;&#10;                  &amp;lt;/JFXButton&amp;gt;&#10;                  &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; layoutX=&amp;quot;10.0&amp;quot; layoutY=&amp;quot;106.0&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Commandes&amp;quot; textFill=&amp;quot;#919191&amp;quot;&amp;gt;&#10;                     &amp;lt;font&amp;gt;&#10;                        &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/font&amp;gt;&#10;                     &amp;lt;cursor&amp;gt;&#10;                        &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                     &amp;lt;/cursor&amp;gt;&#10;                  &amp;lt;/JFXButton&amp;gt;&#10;                  &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; layoutX=&amp;quot;10.0&amp;quot; layoutY=&amp;quot;154.0&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Livraison&amp;quot; textFill=&amp;quot;#919191&amp;quot;&amp;gt;&#10;                     &amp;lt;font&amp;gt;&#10;                        &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/font&amp;gt;&#10;                     &amp;lt;cursor&amp;gt;&#10;                        &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                     &amp;lt;/cursor&amp;gt;&#10;                  &amp;lt;/JFXButton&amp;gt;&#10;                  &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; layoutX=&amp;quot;10.0&amp;quot; layoutY=&amp;quot;202.0&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Comptes&amp;quot; textFill=&amp;quot;#919191&amp;quot;&amp;gt;&#10;                     &amp;lt;font&amp;gt;&#10;                        &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/font&amp;gt;&#10;                     &amp;lt;cursor&amp;gt;&#10;                        &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                     &amp;lt;/cursor&amp;gt;&#10;                  &amp;lt;/JFXButton&amp;gt;&#10;                  &amp;lt;VBox&amp;gt;&#10;                     &amp;lt;children&amp;gt;&#10;                        &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Paramètres&amp;quot; textFill=&amp;quot;#919191&amp;quot;&amp;gt;&#10;                           &amp;lt;font&amp;gt;&#10;                              &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                           &amp;lt;/font&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/JFXButton&amp;gt;&#10;                        &amp;lt;JFXButton alignment=&amp;quot;BASELINE_LEFT&amp;quot; prefHeight=&amp;quot;38.0&amp;quot; prefWidth=&amp;quot;179.0&amp;quot; ripplerFill=&amp;quot;#edf2f4&amp;quot; text=&amp;quot;Se déconnecter&amp;quot; textFill=&amp;quot;#919191&amp;quot;&amp;gt;&#10;                           &amp;lt;font&amp;gt;&#10;                              &amp;lt;Font name=&amp;quot;Arial&amp;quot; size=&amp;quot;16.0&amp;quot; /&amp;gt;&#10;                           &amp;lt;/font&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/JFXButton&amp;gt;&#10;                     &amp;lt;/children&amp;gt;&#10;                     &amp;lt;VBox.margin&amp;gt;&#10;                        &amp;lt;Insets top=&amp;quot;340.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/VBox.margin&amp;gt;&#10;                  &amp;lt;/VBox&amp;gt;&#10;               &amp;lt;/children&amp;gt;&#10;            &amp;lt;/VBox&amp;gt;&#10;         &amp;lt;/children&amp;gt;&#10;      &amp;lt;/AnchorPane&amp;gt;&#10;      &amp;lt;AnchorPane onMouseEntered=&amp;quot;#showmenu&amp;quot; onMouseExited=&amp;quot;#hidemenu&amp;quot; prefHeight=&amp;quot;713.0&amp;quot; prefWidth=&amp;quot;56.0&amp;quot; style=&amp;quot;-fx-background-color: black;&amp;quot; AnchorPane.bottomAnchor=&amp;quot;0.0&amp;quot;&amp;gt;&#10;         &amp;lt;children&amp;gt;&#10;            &amp;lt;VBox alignment=&amp;quot;TOP_CENTER&amp;quot; layoutY=&amp;quot;-0.8&amp;quot; prefHeight=&amp;quot;716.0&amp;quot; prefWidth=&amp;quot;56.0&amp;quot; spacing=&amp;quot;15.0&amp;quot; style=&amp;quot;-fx-background-color: white;&amp;quot; AnchorPane.topAnchor=&amp;quot;-1.0&amp;quot;&amp;gt;&#10;               &amp;lt;children&amp;gt;&#10;                  &amp;lt;ImageView fitHeight=&amp;quot;41.0&amp;quot; fitWidth=&amp;quot;50.0&amp;quot; pickOnBounds=&amp;quot;true&amp;quot; preserveRatio=&amp;quot;true&amp;quot;&amp;gt;&#10;                     &amp;lt;image&amp;gt;&#10;                        &amp;lt;Image url=&amp;quot;@img/logo.png&amp;quot; /&amp;gt;&#10;                     &amp;lt;/image&amp;gt;&#10;                     &amp;lt;VBox.margin&amp;gt;&#10;                        &amp;lt;Insets left=&amp;quot;5.0&amp;quot; top=&amp;quot;10.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/VBox.margin&amp;gt;&#10;                  &amp;lt;/ImageView&amp;gt;&#10;                  &amp;lt;VBox alignment=&amp;quot;CENTER&amp;quot; spacing=&amp;quot;20.0&amp;quot;&amp;gt;&#10;                     &amp;lt;children&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon glyphName=&amp;quot;HOME&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon fill=&amp;quot;#c7c7c7&amp;quot; glyphName=&amp;quot;CUTLERY&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon fill=&amp;quot;#c7c7c7&amp;quot; glyphName=&amp;quot;EXCHANGE&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon fill=&amp;quot;#c7c7c7&amp;quot; glyphName=&amp;quot;MAP_MARKER&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon fill=&amp;quot;#c7c7c7&amp;quot; glyphName=&amp;quot;USERS&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                     &amp;lt;/children&amp;gt;&#10;                     &amp;lt;VBox.margin&amp;gt;&#10;                        &amp;lt;Insets top=&amp;quot;12.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/VBox.margin&amp;gt;&#10;                  &amp;lt;/VBox&amp;gt;&#10;                  &amp;lt;VBox alignment=&amp;quot;CENTER&amp;quot; spacing=&amp;quot;15.0&amp;quot;&amp;gt;&#10;                     &amp;lt;children&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon fill=&amp;quot;#c7c7c7&amp;quot; glyphName=&amp;quot;GEAR&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                        &amp;lt;FontAwesomeIcon fill=&amp;quot;#c7c7c7&amp;quot; glyphName=&amp;quot;SIGN_OUT&amp;quot; size=&amp;quot;2em&amp;quot;&amp;gt;&#10;                           &amp;lt;VBox.margin&amp;gt;&#10;                              &amp;lt;Insets left=&amp;quot;5.0&amp;quot; /&amp;gt;&#10;                           &amp;lt;/VBox.margin&amp;gt;&#10;                           &amp;lt;cursor&amp;gt;&#10;                              &amp;lt;Cursor fx:constant=&amp;quot;HAND&amp;quot; /&amp;gt;&#10;                           &amp;lt;/cursor&amp;gt;&#10;                        &amp;lt;/FontAwesomeIcon&amp;gt;&#10;                     &amp;lt;/children&amp;gt;&#10;                     &amp;lt;VBox.margin&amp;gt;&#10;                        &amp;lt;Insets top=&amp;quot;340.0&amp;quot; /&amp;gt;&#10;                     &amp;lt;/VBox.margin&amp;gt;&#10;                  &amp;lt;/VBox&amp;gt;&#10;               &amp;lt;/children&amp;gt;&#10;            &amp;lt;/VBox&amp;gt;&#10;         &amp;lt;/children&amp;gt;&#10;      &amp;lt;/AnchorPane&amp;gt;&#10;   &amp;lt;/children&amp;gt;&#10;&amp;lt;/AnchorPane&amp;gt;&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Après avoir examiné le code fourni, voici quelques points à vérifier pour résoudre le problème d'affichage du graphique `StackedBarChart` :&#10;&#10;1. **Vérifiez que le graphique est correctement initialisé dans le contrôleur**&#10;Assurez-vous que vous avez une instance de `StackedBarChart` dans votre contrôleur JavaFX (`AdminDashboardController`) et que vous l'avez correctement initialisée avec un `@FXML` ou manuellement après l'initialisation du contrôleur.&#10;&#10;2. **Vérifiez que la méthode `populateStackedBarChart` est appelée au bon moment**&#10;Vous devez appeler la méthode `populateStackedBarChart` après avoir initialisé le graphique et établi une connexion à la base de données. Généralement, cela se fait dans la méthode `initialize` du contrôleur JavaFX.&#10;&#10;3. **Vérifiez que les données sont correctement récupérées de la base de données**&#10;Assurez-vous que la méthode `calculerCommandesLivreesEtAnnulees` retourne les bonnes valeurs pour les commandes livrées et annulées. Vous pouvez ajouter des instructions `System.out.println` pour vérifier les valeurs retournées.&#10;&#10;4. **Vérifiez que les axes du graphique sont correctement configurés**&#10;Dans votre code FXML, vous avez défini un `CategoryAxis` pour l'axe des abscisses (X) et un `NumberAxis` pour l'axe des ordonnées (Y). Assurez-vous que ces axes sont correctement configurés pour afficher les données attendues.&#10;&#10;5. **Vérifiez que le graphique est correctement ajouté à la scène JavaFX**&#10;Dans votre code FXML, vous avez défini un `StackedBarChart` avec l'ID `stackedBarChart`. Assurez-vous que cet élément est correctement lié à l'instance de `StackedBarChart` dans votre contrôleur JavaFX.&#10;&#10;6. **Vérifiez les logs et la console pour les erreurs**&#10;Examinez attentivement les logs et la console de votre environnement de développement pour détecter d'éventuelles erreurs ou exceptions qui pourraient expliquer le problème.&#10;&#10;Si malgré ces vérifications, vous n'arrivez toujours pas à résoudre le problème, n'hésitez pas à fournir plus de détails sur votre code, votre configuration et les erreurs rencontrées. Cela me permettra de vous aider de manière plus efficace." />
                    </message>
                  </list>
                </messages>
                <updatedAt value="2024-05-13T01:49:19.0519858" />
              </chat>
              <chat>
                <internalId value="d0d491b0-65df-402e-a820-85645a388b81" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="a6d4698c-cb1a-493e-b9e9-61467105a4f4" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="fe268cda-d850-47cf-9a34-5f53024ab3de" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="d5038558-8418-4499-a3b4-04b3e042205f" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="01ead711-bb8b-4d52-b982-311dbe8ff164" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="52cbc96e-3161-421d-972d-38ea5be4250b" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
            </list>
          </chats>
          <defaultLlm>
            <llm>
              <model value="anthropic/claude-3-sonnet-20240229" />
              <provider value="Anthropic" />
              <title value="Claude 3 Sonnet" />
            </llm>
          </defaultLlm>
        </AccountData>
      </list>
    </accountData>
  </component>
</project>